import json
import os
from datetime import datetime
import logging

class StatsLogger:
    def __init__(self):
        self.stats = {
            'total_attempts': 0,
            'successful_views': 0,
            'successful_messages': 0,
            'failed_views': 0,
            'failed_messages': 0,
            'blocked_users': 0,
            'start_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'last_reset': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'daily_stats': {}
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('bot_stats.log', encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        self.load_stats()
    
    def load_stats(self):
        if os.path.exists('stats.json'):
            try:
                with open('stats.json', 'r', encoding='utf-8') as f:
                    self.stats = json.load(f)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def save_stats(self):
        try:
            with open('stats.json', 'w', encoding='utf-8') as f:
                json.dump(self.stats, f, ensure_ascii=False, indent=4)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def log_story_view(self, user_id, success, error=None):
        self.stats['total_attempts'] += 1
        if success:
            self.stats['successful_views'] += 1
            self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            self.stats['failed_views'] += 1
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error}")
        self.save_stats()
    
    def log_message_send(self, user_id, success, error=None):
        if success:
            self.stats['successful_messages'] += 1
            self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            self.stats['failed_messages'] += 1
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {error}")
        self.save_stats()
    
    def log_blocked_user(self, user_id):
        self.stats['blocked_users'] += 1
        self.logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        self.save_stats()
    
    def get_daily_stats(self):
        today = datetime.now().strftime('%Y-%m-%d')
        if today not in self.stats['daily_stats']:
            self.stats['daily_stats'][today] = {
                'views': 0,
                'messages': 0,
                'errors': 0
            }
        return self.stats['daily_stats'][today]
    
    def print_summary(self):
        total_time = datetime.now() - datetime.strptime(self.stats['start_time'], '%Y-%m-%d %H:%M:%S')
        hours = total_time.total_seconds() / 3600
        
        summary = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:
‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours:.2f} —á–∞—Å–æ–≤
üë• –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {self.stats['total_attempts']}
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏—Å—Ç–æ—Ä–∏–π: {self.stats['successful_views']}
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats['successful_messages']}
‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {self.stats['failed_views']}
‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: {self.stats['failed_messages']}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.stats['blocked_users']}
        """
        self.logger.info(summary)
        return summary 